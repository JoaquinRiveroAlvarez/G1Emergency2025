// <auto-generated />
using System;
using G1Emergency2025.BD.Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace G1Emergency2025.BD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022144605_Persona1")]
    partial class Persona1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Causa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("posibleCausa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Codigo" }, "Causa_UQ")
                        .IsUnique();

                    b.ToTable("Causas");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.DiagPresuntivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("PosDiagnostico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("DiagPresuntivos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CausaId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TipoEstadoId")
                        .HasColumnType("int");

                    b.Property<int>("colorEvento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CausaId");

                    b.HasIndex("TipoEstadoId");

                    b.HasIndex(new[] { "Codigo" }, "Evento_UQ")
                        .IsUnique();

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.EventoLugarHecho", b =>
                {
                    b.Property<int>("LugarHechoId")
                        .HasColumnType("int");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.HasKey("LugarHechoId", "EventoId");

                    b.HasIndex("EventoId");

                    b.ToTable("EventoLugarHechos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.EventoUsuario", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("EventoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EventoUsuarios");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovilId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripulanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovilId");

                    b.HasIndex("TripulanteId");

                    b.ToTable("Historicos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.LugarHecho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Codigo" }, "LugarHecho_UQ")
                        .IsUnique();

                    b.ToTable("LugarHechos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Movil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TipoMovilId")
                        .HasColumnType("int");

                    b.Property<int>("disponibilidadMovil")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("TipoMovilId");

                    b.HasIndex(new[] { "Patente" }, "Patente_UQ")
                        .IsUnique();

                    b.ToTable("Movils");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("ObraSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.PacienteEvento", b =>
                {
                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.HasKey("PacienteId", "EventoId");

                    b.HasIndex("EventoId");

                    b.ToTable("PacienteEventos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dirección")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Edad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Codigo" }, "Codigo_UQ")
                        .IsUnique();

                    b.ToTable("Rols");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.TipoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Codigo" }, "Codigo_UQ")
                        .IsUnique();

                    b.ToTable("TipoEstados");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.TipoMovil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Codigo" }, "TipoMovil_UQ")
                        .IsUnique();

                    b.ToTable("TipoMovil");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.TipoTripulante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Codigo" }, "TipoTripulante_UQ")
                        .IsUnique();

                    b.ToTable("TipoTripulantes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.TripulacionActual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<int>("MovilId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripulanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovilId");

                    b.HasIndex("TripulanteId");

                    b.ToTable("TripulacionActuals");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Tripulante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnMovil")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoTripulanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("TipoTripulanteId");

                    b.ToTable("Tripulantes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("EstadoRegistro")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.UsuarioRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuarioRols");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.DiagPresuntivo", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Paciente", "Pacientes")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Evento", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Causa", "Causa")
                        .WithMany()
                        .HasForeignKey("CausaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.TipoEstado", "TipoEstados")
                        .WithMany()
                        .HasForeignKey("TipoEstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Causa");

                    b.Navigation("TipoEstados");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.EventoLugarHecho", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Evento", "Eventos")
                        .WithMany("EventoLugarHechos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.LugarHecho", "LugarHecho")
                        .WithMany("EventoLugarHechos")
                        .HasForeignKey("LugarHechoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Eventos");

                    b.Navigation("LugarHecho");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.EventoUsuario", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Evento", "Eventos")
                        .WithMany("EventoUsuarios")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Usuario", "Usuarios")
                        .WithMany("EventoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Eventos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Historico", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Movil", "Movil")
                        .WithMany()
                        .HasForeignKey("MovilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Tripulante", "Tripulantes")
                        .WithMany()
                        .HasForeignKey("TripulanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movil");

                    b.Navigation("Tripulantes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Movil", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.TipoMovil", "TipoMovils")
                        .WithMany()
                        .HasForeignKey("TipoMovilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("TipoMovils");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Paciente", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Persona", "Personas")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.PacienteEvento", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Evento", "Eventos")
                        .WithMany("PacienteEventos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Paciente", "Pacientes")
                        .WithMany("PacienteEventos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Eventos");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.TripulacionActual", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Movil", "Movils")
                        .WithMany()
                        .HasForeignKey("MovilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Tripulante", "Tripulantes")
                        .WithMany()
                        .HasForeignKey("TripulanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movils");

                    b.Navigation("Tripulantes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Tripulante", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Persona", "Personas")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.TipoTripulante", null)
                        .WithMany("Tripulantes")
                        .HasForeignKey("TipoTripulanteId");

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Usuario", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Persona", "Personas")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.UsuarioRol", b =>
                {
                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Rol", "Rols")
                        .WithMany("UsuarioRols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("G1Emergency2025.BD.Datos.Entity.Usuario", "Usuarios")
                        .WithMany("UsuarioRols")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rols");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Evento", b =>
                {
                    b.Navigation("EventoLugarHechos");

                    b.Navigation("EventoUsuarios");

                    b.Navigation("PacienteEventos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.LugarHecho", b =>
                {
                    b.Navigation("EventoLugarHechos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Paciente", b =>
                {
                    b.Navigation("PacienteEventos");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Rol", b =>
                {
                    b.Navigation("UsuarioRols");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.TipoTripulante", b =>
                {
                    b.Navigation("Tripulantes");
                });

            modelBuilder.Entity("G1Emergency2025.BD.Datos.Entity.Usuario", b =>
                {
                    b.Navigation("EventoUsuarios");

                    b.Navigation("UsuarioRols");
                });
#pragma warning restore 612, 618
        }
    }
}
