@* @page "/causas"
@using G1Emergency2025.Shared.DTO
@inject HttpClient Http

<h3>Causas</h3>

@if (causas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <ul>
        @foreach (var c in causas)
        {
            <li>@c.Codigo - @c.posibleCausa - @c.Observacion</li>
        }
    </ul>
}

@code {
    private List<CausaDTO>? causas;

    protected override async Task OnInitializedAsync()
    {
        causas = await Http.GetFromJsonAsync<List<CausaDTO>>("api/causa");
    }
} *@
@page "/causas"
@using G1Emergency2025.Shared.DTO
@inject HttpClient Http

<h3>Causas</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (causas == null)
{
    <p><em>Cargando...</em></p>
}
else if (causas.Count == 0)
{
    <p>No hay causas registradas.</p>
}
else
{
    <ul>
        @foreach (var c in causas)
        {
            <li>@c.Codigo - @c.posibleCausa </li>
        }
    </ul>
}

@code {
    private List<CausaDTO>? causas;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            causas = await Http.GetFromJsonAsync<List<CausaDTO>>("api/causa");

            if (causas == null)
                causas = new List<CausaDTO>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar las causas: {ex.Message}";
            Console.WriteLine($"[ERROR] {ex}"); // se ve en la consola del navegador
        }
    }
}

