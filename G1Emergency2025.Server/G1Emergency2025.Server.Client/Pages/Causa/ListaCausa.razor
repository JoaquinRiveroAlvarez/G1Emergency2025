@page "/causas"
@inject IHttpServicio Http

<h3>Lista de Causas</h3>
<br />
<a class="btn btn-primary" href="/causas/crear">Nueva Causa</a>
<br>
<table>
    <tr>
        <th>Causas</th>
    </tr>
    @if (causas == null)
    {
        <p>Buscando...</p>
    }
    else if (causas.Count == 0)
    {
        <p>No hay Causas cargadas en esta lista</p>
    }
    else
    {
        @foreach (var causa in causas)
        {
            <tr>
                <td>@causa.Codigo</td>
                <td>
                    <a class="btn btn-primary"
                       href="/causas/editar/{causa.Id}">
                        Editar
                    </a>
                </td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="() => Borrar(causa)">
                        Borrar
                    </button>
                </td>
            </tr>
        }
    }
</table>
<br />
<p>@Mensaje</p>
@code {
    List<CausaListadoDTO>? causas;
    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerCausas();

    }
    private async Task LeerCausas()
    {
        var resp = await Http.Get<List<CausaListadoDTO>>("api/causa/ListaCausa");
        if (!resp.Error)
        {
            causas = resp.Respuesta;
        }
        else
        {
            Mensaje = resp.ObtenerError();
        }
    }

    private async Task Borrar(CausaListadoDTO causa)
    {
        var resp = await Http.Delete($"api/causa/{causa.Id}");
        if (resp.Error)
        {
            Mensaje = resp.ObtenerError();
        }
        await LeerCausas();
    }
}
