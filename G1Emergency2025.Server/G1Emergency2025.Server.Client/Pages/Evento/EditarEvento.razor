@page "/eventos/editar/{Id:int}"
@inject IHttpServicio Http
@inject NavigationManager Nav

<h3>Editar Evento</h3>

@if (cargando)
{
    <p>Cargando datos...</p>
}
else if (evento == null)
{
    <p>No se encontró el evento.</p>
}
else
{
    <EditForm Model="@evento" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Código</label>
            <InputText class="form-control" @bind-Value="evento.Codigo" />
            <ValidationMessage For="@(() => evento.Codigo)" />
        </div>

        <div class="form-group">
            <label>Domicilio</label>
            <InputText class="form-control" @bind-Value="evento.Domicilio" />
            <ValidationMessage For="@(() => evento.Domicilio)" />
        </div>

        <div class="form-group">
            <label>Teléfono</label>
            <InputText class="form-control" @bind-Value="evento.Telefono" />
            <ValidationMessage For="@(() => evento.Telefono)" />
        </div>

        <div class="form-group">
            <label>Fecha y Hora</label>
            <InputDate class="form-control" @bind-Value="evento.FechaHora" />
            <ValidationMessage For="@(() => evento.FechaHora)" />
        </div>

        <div class="form-group">
            <label>Color del Evento</label>
            <InputSelect class="form-control" @bind-Value="evento.colorEvento">
                @foreach (var color in Enum.GetValues<ColorEvento>())
                {
                    <option value="@color">@color</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => evento.colorEvento)" />
        </div>

        <div class="form-group">
            <label>Causa</label>
            <InputSelect class="form-control" @bind-Value="evento.CausaId">
                <option value="0">-- Seleccionar causa --</option>
                @foreach (var c in causas)
                {
                    <option value="@c.Id">@($"{c.Codigo} - {c.posibleCausa}")</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => evento.CausaId)" />
        </div>

        <div class="form-group">
            <label>Estado</label>
            <InputSelect class="form-control" @bind-Value="evento.TipoEstadoId">
                <option value="0">-- Seleccionar estado --</option>
                @foreach (var e in tipoestados)
                {
                    <option value="@e.Id">@($"{e.Codigo} - {e.Tipo}")</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => evento.TipoEstadoId)" />
        </div>

        <div class="form-group">
            <label>Pacientes</label>
            <InputSelectMultiple @bind-Value="evento.PacienteIds" class="form-control">
                @foreach (var p in pacientes)
                {
                    <option value="@p.Id">@p.ObraSocial</option>
                }
            </InputSelectMultiple>
            <ValidationMessage For="@(() => evento.PacienteIds)" />
        </div>

        <div class="form-group">
            <label>Usuarios</label>
            <InputSelectMultiple @bind-Value="evento.UsuarioIds" class="form-control">
                @foreach (var u in usuarios)
                {
                    <option value="@u.Id">@($"{u.Nombre} - {u.Contrasena}")</option>
                }
            </InputSelectMultiple>
            <ValidationMessage For="@(() => evento.UsuarioIds)" />
        </div>

        <div class="form-group">
            <label>Lugares del Hecho</label>
            <InputSelectMultiple @bind-Value="evento.LugarHechoIds" class="form-control">
                @foreach (var l in lugares)
                {
                    <option value="@l.Id">@($"{l.Codigo} - {l.Tipo} - {l.Descripcion}")</option>
                }
            </InputSelectMultiple>
            <ValidationMessage For="@(() => evento.LugarHechoIds)" />
        </div>

        <br />
        <button class="btn btn-primary" type="submit">Guardar</button>
        <button class="btn btn-secondary" @onclick="Volver">Cancelar</button>
    </EditForm>
}

<p>@Mensaje</p>

@code {
    [Parameter] public int Id { get; set; }
    private EventoDTO? evento;
    private List<CausaDTO> causas = new();
    private List<TipoEstadoDTO> tipoestados = new();
    private List<PacienteResumenDTO> pacientes = new();
    private List<UsuarioResumenDTO> usuarios = new();
    private List<LugarHechoResumenDTO> lugares = new();
    private string Mensaje = "";
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar listas base
            var respPacientes = await Http.Get<List<PacienteResumenDTO>>("api/paciente");
            var respUsuarios = await Http.Get<List<UsuarioResumenDTO>>("api/usuario");
            var respLugares = await Http.Get<List<LugarHechoResumenDTO>>("api/lugarhecho");
            var respTipoEstados = await Http.Get<List<TipoEstadoDTO>>("api/tipoestado");
            var respCausas = await Http.Get<List<CausaDTO>>("api/causa");

            if (!respCausas.Error) causas = respCausas.Respuesta!;
            if (!respTipoEstados.Error) tipoestados = respTipoEstados.Respuesta!;
            if (!respPacientes.Error) pacientes = respPacientes.Respuesta!;
            if (!respUsuarios.Error) usuarios = respUsuarios.Respuesta!;
            if (!respLugares.Error) lugares = respLugares.Respuesta!;

            // Cargar evento con sus relaciones
            var respEvento = await Http.Get<EventoDTO>($"api/evento/id/{Id}");
            if (!respEvento.Error)
            {
                evento = respEvento.Respuesta!;
            }
            else
            {
                Mensaje = respEvento.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Error al cargar datos: {ex.Message}";
        }
        cargando = false;

    }

    private async Task GuardarCambios()
    {
        var resp = await Http.Put<EventoDTO, int>($"api/evento/{Id}", evento!);
        if (!resp.Error)
        {
            Nav.NavigateTo("/eventos", forceLoad: true);
        }
        else
        {
            Mensaje = resp.ObtenerError();
        }
    }

    private void Volver()
    {
        Nav.NavigateTo("/eventos");
    }
}
